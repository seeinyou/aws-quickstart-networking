AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation template of creating a Public subnet and a Private subnet and assign them to Public and Private Route Tables in each AZ in a VPC in an AWS region."
Parameters:
  VpcId:
    Description: The VpcId from the main VPC CloudFormation stack.
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be the id of an existing VPC.
  VpcCidr:
    Description: The CIDR range of the VPC
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(0)\\.(0)/(16)"
    ConstraintDescription: must be a valid IP CIDR range that ends with /16 like x.x.0.0/16
  VpcName:
    Description: The NewVpcName in the vpc CloudFormation stack.
    Type: String
    MinLength: 1
    MaxLength: 32
  RouteTableIdPub:
    Description: The Public Route table id of the VPC.
    Type: String
    MinLength: 8
    MaxLength: 32
  RouteTableIdPriv:
    Description: The Private Route table id of the VPC.
    Type: String
    MinLength: 8
    MaxLength: 32
  #deployAZ:
  #Description: The AWS Available Zone that the new subnets should be deployed to.
  #Type: List<AWS::EC2::AvailabilityZone::Name>
  SubnetName:
    Description: The common name of the subnets
    Default: "subnet"
    Type: String
    MinLength: 1
    # MaxLength: 32
  # Uniserval parameters
  Level:
    Default: prod
    Description: The Level keyword of the security groups.
    Type: String
    AllowedValues:
      - prod
      - test
      - uat
  TheAuthor:
    Default: DevOps
    Description: The person's initail for the Author tag of the resources
    Type: String
    MinLength: 2
    MaxLength: 6
  TagLevel:
    Default: Test
    Description: The Level tag of resourses.
    Type: String
    AllowedValues:
      - Production
      - Test
      - UAT
  # Nested template locations
  TemplateS3URL:
    Default: ""
    Description: The S3 HTTP domain for all sub-templates
    Type: String
    # MinLength: 1
  TemplateS3DomainSuffix:
    Default: ""
    Description: The S3 HTTPS domain suffix for mainland China is ".cn". Leave it to empty for other regions.
    Type: String
    AllowedValues:
      - ""
      - ".cn"
  TemplateFolder:
    Default: "nested"
    Description: The S3 bucket path sub-templates
    Type: String
    # MinLength: 1
  ElbSecurityLevel: # For ELB sub-template
    Type: String
    Description: The ELB listener SSL/TLS security policy level. Don't use SSL/TLS when is set to 'No'
    Default: 'No'
    AllowedValues:
    - 'No'
    - AppDefault
    - AppNormal
    - AppHigh
    ConstraintDescription: must be one of entities defined in the Mappings->ElbSecurityPolicy

Resources:
  # Create the Public Subnet in AZ a
  publicSubnetA1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ["0", !GetAZs ""]
      CidrBlock:
        Fn::Select:
          - "0"
          - Fn::Cidr:
              - Ref: VpcCidr
              - "6"
              - "8"
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-sn-pub-a-1"
        - Key: Author
          Value:
            Ref: TheAuthor
        - Key: AZ
          Value: !Select ["0", !GetAZs ""]
  # Subnet Route Table Association in AZ a
  AddPubSubnetA1ToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: publicSubnetA1
      RouteTableId:
        Ref: RouteTableIdPub
  # Create the Private Subnet in AZ a
  privateSubnetA1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ["0", !GetAZs ""]
      CidrBlock:
        Fn::Select:
          - "1"
          - Fn::Cidr:
              - Ref: VpcCidr
              - "6"
              - "8"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-sn-priv-a-1"
        - Key: Author
          Value: !Ref TheAuthor
        - Key: AZ
          Value: !Select ["0", !GetAZs ""]
  #Subnet Route Table Association in AZ a
  AddPrivateSubnetA1ToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnetA1
      RouteTableId:
        Ref: RouteTableIdPriv
  # Create the Public Subnet in AZ b
  publicSubnetB1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ["1", !GetAZs ""]
      CidrBlock:
        Fn::Select:
          - "2"
          - Fn::Cidr:
              - !Ref VpcCidr
              - "6"
              - "8"
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-sn-pub-b-1"
        - Key: Author
          Value:
            Ref: TheAuthor
        - Key: AZ
          Value: !Select ["1", !GetAZs ""]
  #Subnet Route Table Association in AZ b
  AddPubSubnetB1ToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: publicSubnetB1
      RouteTableId:
        Ref: RouteTableIdPub
  # Create a private subnet in AZ b
  privateSubnetB1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ["1", !GetAZs ""]
      CidrBlock:
        Fn::Select:
          - "3"
          - Fn::Cidr:
              - Ref: VpcCidr
              - "6"
              - "8"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-sn-priv-b-1"
        - Key: Author
          Value:
            Ref: TheAuthor
        - Key: AZ
          Value: !Select ["1", !GetAZs ""]
  #Subnet Route Table Association in AZ b
  AddPrivateSubnetB1ToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnetB1
      RouteTableId:
        Ref: RouteTableIdPriv
  # Create the Public subnet in AZ c
  publicSubnetC1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ["2", !GetAZs ""]
      CidrBlock:
        Fn::Select:
          - "4"
          - Fn::Cidr:
              - Ref: VpcCidr
              - "6"
              - "8"
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-sn-pub-c-1"
        - Key: Author
          Value:
            Ref: TheAuthor
        - Key: AZ
          Value: !Select ["2", !GetAZs ""]
  #Subnet Route Table Association
  AddPubSubnetC1ToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: publicSubnetC1
      RouteTableId:
        Ref: RouteTableIdPub
  # Create a private subnet in AZ c
  privateSubnetC1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select ["2", !GetAZs ""]
      CidrBlock:
        Fn::Select:
          - "5"
          - Fn::Cidr:
              - Ref: VpcCidr
              - "6"
              - "8"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: VpcId
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-sn-priv-c-1"
        - Key: Author
          Value:
            Ref: TheAuthor
        - Key: AZ
          Value: !Select ["2", !GetAZs ""]
  #Subnet Route Table Association
  AddPrivateSubnetC1ToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnetC1
      RouteTableId:
        Ref: RouteTableIdPriv
  # Create the default RDS Subnet Group for the VPC
  defaultRdsSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "The default RDS subnet group for the VPC. All subnets should be private by default."
      DBSubnetGroupName: !Sub "${VpcName}-${AWS::Region}-rds-subnet-group-1"
      # Add all private subnets to the group
      SubnetIds:
        - Ref: privateSubnetA1
        - Ref: privateSubnetB1
        - Ref: privateSubnetC1
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-${AWS::Region}-rds-subnet-group-1"
        - Key: Author
          Value: !Ref TheAuthor
  # Create child stacks by calling nested stacks
  # Create ELBs for the VPC
  vpcElbStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${TemplateS3URL}.amazonaws.com${TemplateS3DomainSuffix}/${TemplateFolder}/elb_nested.yml"
      TimeoutInMinutes: 5
      Parameters:
        Level: !Ref Level
        Subnets: # Join subnet ids to a string
          Fn::Join:
            - ","
            - - Ref: publicSubnetA1
              - Ref: publicSubnetB1
              - Ref: publicSubnetC1
        SecurityGroups:
          Fn::ImportValue: !Sub "${VpcName}-elbweb-security-id"
        SecurityLevel: !Ref ElbSecurityLevel
        TagLevel: !Ref TagLevel
        TheAuthor: !Ref TheAuthor
    DependsOn:
      - publicSubnetA1
      - publicSubnetB1
      - publicSubnetC1
  # Create the ElastiCache subnet group
  ElastiCacheSubnetGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${TemplateS3URL}.amazonaws.com${TemplateS3DomainSuffix}/${TemplateFolder}/elc_subnet_group_nested.yml"
      TimeoutInMinutes: 5
      Parameters:
        GroupName: subg-1
        GroupDesc: The default subnet group for ElastiCache clusters
        Subnets:
          Fn::Join:
            - ","
            - - Ref: privateSubnetA1
              - Ref: privateSubnetB1
              - Ref: privateSubnetC1
        VpcName: !Ref VpcName
    DependsOn:
      - publicSubnetA1
      - publicSubnetB1
      - publicSubnetC1

Outputs:
  PubSubnetA1Id:
    Description: The resource_id of the new public subnet
    Value: !Ref publicSubnetA1
    Export:
      Name: !Sub "${SubnetName}-id-a-pub-1"
  PrivSubnetA1Id:
    Description: The resource_id of the new private subnet
    Value: !Ref privateSubnetA1
    Export:
      Name: !Sub "${SubnetName}-id-a-priv-1"
  PubSubnetB1Id:
    Description: The resource_id of the new public subnet
    Value: !Ref publicSubnetB1
    Export:
      Name: !Sub "${SubnetName}-id-b-pub-1"
  PrivSubnetB1Id:
    Description: The resource_id of the new private subnet
    Value: !Ref privateSubnetB1
    Export:
      Name: !Sub "${SubnetName}-id-b-priv-1"
  PubSubnetC1Id:
    Description: The resource_id of the new public subnet
    Value: !Ref publicSubnetC1
    Export:
      Name: !Sub "${SubnetName}-id-c-pub-1"
  PrivSubnetC1Id:
    Description: The resource_id of the new private subnet
    Value: !Ref privateSubnetC1
    Export:
      Name: !Sub "${SubnetName}-id-c-priv-1"

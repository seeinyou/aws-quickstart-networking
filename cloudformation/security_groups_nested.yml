AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation template to create uniserval security groups."
Parameters:
  VpcId:
    Description: The VpcId from the main VPC CloudFormation stack.
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be the id of an existing VPC.
  VpcName:
    Description: The NewVpcName in the vpc CloudFormation stack.
    Type: String
    MinLength: 1
    MaxLength: 32
  SgGroupName:
    Description: The name of the new security group.
    Type: String
  sgGroupNameInfo:
    Description: The description of the new security group.
    Type: String
    Default: Security groups for the VPC
  Cidr:
    Description: The CIDR description of the new security group.
    Type: String
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 10.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  CreateLambdaSg:
    Description: Whether the template creates Lambda security group or not
    Type: String
    Default: ""
  # Universal parameters
  Level:
    Default: prod
    Description: The Level keyword of the security groups.
    Type: String
    AllowedValues:
      - prod
      - test
      - uat
  TagLevel:
    Default: Test
    Description: The Level tag of resourses.
    Type: String
    AllowedValues:
      - Production
      - Test
      - UAT
  TheAuthor:
    Default: DevOps
    Description: The person's initail for the Author tag of the resources
    Type: String
    MinLength: 2
    MaxLength: 6
  # Sub-template parameters
  TemplateS3URL:
    Default: ""
    Description: The S3 bucket name for the S3 HTTP domain for all sub-templates
    Type: String
# Data mappings
Mappings:
  # Pre-defined security rules
  SecurityRules:
    RuleSSH:
      IpProtocol: tcp
      FromPort: "22"
      ToPort: "22"
      Description: Allow dev/devops access ec2 via SSH
    RulePing:
      IpProtocol: 1
      FromPort: 8
      ToPort: -1
      Description: Allow ping EC2 instances
    RuleCache:
      IpProtocol: tcp
      FromPort: 11212
      ToPort: 11220
      Description: Access to Memcached instances
    RuleHTTP:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: "0.0.0.0/0"
      CidrIpv6: "::/0"
      Description: Allow HTTP access from
    RuleHTTPS:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: "0.0.0.0/0"
      CidrIpv6: "::/0"
      Description: Allow HTTPS access from
    RuleMySQL:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      Description: Allow RDS access from
    RuleNFS:
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      Description: Allow NFS access from
    RuleMqAdmin:
      IpProtocol: tcp
      FromPort: 8161
      ToPort: 8161
      Description: Allow MQ admin page access from
    RuleMqTask:
      IpProtocol: tcp
      FromPort: 61613
      ToPort: 61613
      Description: Allow MQ consumers access from
Conditions:
  CondCreateLambdaSG:
    !Not [ !Equals [!Ref CreateLambdaSg, ''] ]
Resources:
  # Create universal security groups for the VPC
  # Create devops security group
  DevSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Ref SgGroupName
      GroupDescription: Enable SSH access via port 22 and other ports for DevOps and devs.
      SecurityGroupIngress:
        # Allow DevOps SSH connection
        - IpProtocol: !FindInMap ["SecurityRules", "RuleSSH", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleSSH", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleSSH", ToPort]
          Description: !FindInMap ["SecurityRules", "RuleSSH", Description]
          CidrIp:
            Ref: SSHLocation
        # Allow ping
        - IpProtocol: !FindInMap ["SecurityRules", "RulePing", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RulePing", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RulePing", ToPort]
          Description: !FindInMap ["SecurityRules", "RulePing", Description]
          CidrIp:
            Ref: SSHLocation
      Tags:
        - Key: Author
          Value: !Ref TheAuthor
        - Key: Level
          Value: !Ref TagLevel
  # Create devops security group
  InfraSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub "${SgGroupName}-infra"
      GroupDescription: Allow access to private services
      SecurityGroupIngress:
        # Allow access to MySQL/Aurora
        - IpProtocol: tcp
          Description: Access to MySQL
          FromPort: 3306
          ToPort: 3306
          CidrIp:
            Ref: SSHLocation
        # Allow EFS
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp:
            Ref: SSHLocation
          Description: Access to EFS
        # Allow Memcached
        - IpProtocol: !FindInMap ["SecurityRules", "RuleCache", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleCache", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleCache", ToPort]
          Description: !FindInMap ["SecurityRules", "RuleCache", Description]
          CidrIp:
            Ref: SSHLocation
      Tags:
        - Key: Author
          Value: !Ref TheAuthor
        - Key: Level
          Value: !Ref TagLevel
  # Create dedicated security groups for different types of resources
  ElbWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub "${VpcName}-sg-elb-pub"
      GroupDescription: Allow access to ELB service
      SecurityGroupIngress:
        # Allow HTTP access IPv4
        - IpProtocol: !FindInMap ["SecurityRules", "RuleHTTP", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleHTTP", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleHTTP", ToPort]
          CidrIp: !FindInMap ["SecurityRules", "RuleHTTP", CidrIp]
          Description:
            Fn::Sub:
              - "${desc} internet"
              - { desc: !FindInMap ["SecurityRules", "RuleHTTP", Description] }
        # Allow HTTPS access IPv4
        - IpProtocol: !FindInMap ["SecurityRules", "RuleHTTPS", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleHTTPS", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleHTTPS", ToPort]
          CidrIp: !FindInMap ["SecurityRules", "RuleHTTPS", CidrIp]
          Description:
            Fn::Sub:
              - "${desc} internet"
              - { desc: !FindInMap ["SecurityRules", "RuleHTTPS", Description] }
        # Allow HTTP access IPv6
        - IpProtocol: !FindInMap ["SecurityRules", "RuleHTTP", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleHTTP", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleHTTP", ToPort]
          CidrIpv6: !FindInMap ["SecurityRules", "RuleHTTP", CidrIpv6]
          Description:
            Fn::Sub:
              - "${desc} internet IPv6"
              - { desc: !FindInMap ["SecurityRules", "RuleHTTP", Description] }
        # Allow HTTPS access IPv6
        - IpProtocol: !FindInMap ["SecurityRules", "RuleHTTPS", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleHTTPS", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleHTTPS", ToPort]
          CidrIpv6: !FindInMap ["SecurityRules", "RuleHTTPS", CidrIpv6]
          Description:
            Fn::Sub:
              - "${desc} internet IPv6"
              - { desc: !FindInMap ["SecurityRules", "RuleHTTPS", Description] }
      Tags:
        - Key: Author
          Value: !Ref TheAuthor
        - Key: Level
          Value: !Ref TagLevel
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub "${VpcName}-sg-webfront"
      GroupDescription: Webfront instance security configurations
      SecurityGroupIngress:
        # Allow HTTP requests from ELB
        - IpProtocol: !FindInMap ["SecurityRules", "RuleHTTP", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleHTTP", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleHTTP", ToPort]
          SourceSecurityGroupId: !Ref ElbWebSecurityGroup
          Description:
            Fn::Sub:
              - "${desc} public ELBs"
              - { desc: !FindInMap ["SecurityRules", "RuleHTTP", Description] }
      Tags:
        - Key: Author
          Value: !Ref TheAuthor
        - Key: Level
          Value: !Ref TagLevel
    DependsOn:
      - ElbWebSecurityGroup

  # Create RDS security group
  RdsSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub "${VpcName}-sg-rds"
      GroupDescription: Webfront instance security configurations
      SecurityGroupIngress:
        # Allow MySQL requests from Webfront instances
        - IpProtocol: !FindInMap ["SecurityRules", "RuleMySQL", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleMySQL", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleMySQL", ToPort]
          SourceSecurityGroupId: !Ref WebSecurityGroup
          Description:
            Fn::Sub:
              - "${desc} public webfront EC2 instances"
              - { desc: !FindInMap ["SecurityRules", "RuleMySQL", Description] }
      Tags:
        - Key: Author
          Value: !Ref TheAuthor
        - Key: Level
          Value: !Ref TagLevel

  # Create ElastiCache security group
  CacheSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub "${VpcName}-sg-cache-1"
      GroupDescription: ElastiCache security configurations. Allow access from Infra security group.
      SecurityGroupIngress:
        # Allow Memcached requests from Infra security group
        - IpProtocol: !FindInMap ["SecurityRules", "RuleCache", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleCache", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleCache", ToPort]
          SourceSecurityGroupId: !Ref InfraSecurityGroup
          Description:
            Fn::Sub:
              - "${desc} instances within Infra security group"
              - { desc: !FindInMap ["SecurityRules", "RuleCache", Description] }
      Tags:
        - Key: Author
          Value: !Ref TheAuthor
        - Key: Level
          Value: !Ref TagLevel
    DependsOn:
      - InfraSecurityGroup
  # Create Elastic File System security group
  EfsSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub "${VpcName}-sg-efs-1"
      GroupDescription: EFS security configurations. Allow access from Infra security group.
      SecurityGroupIngress:
        # Allow NFS requests from resources in the Infra security group
        - IpProtocol: !FindInMap ["SecurityRules", "RuleNFS", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleNFS", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleNFS", ToPort]
          SourceSecurityGroupId: !Ref InfraSecurityGroup
          Description:
            Fn::Sub:
              - "${desc} instances within Infra security group"
              - { desc: !FindInMap ["SecurityRules", "RuleNFS", Description] }
      Tags:
        - Key: Author
          Value: !Ref TheAuthor
        - Key: Level
          Value: !Ref TagLevel
    DependsOn:
      - InfraSecurityGroup
  # Create devops security group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CondCreateLambdaSG
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub "${VpcName}-sg-lambda"
      GroupDescription: Enable access to port 80(HTTP) and port 443(HTTPS).
      SecurityGroupIngress:
        # Allow HTTP connection
        - IpProtocol: !FindInMap ["SecurityRules", "RuleHTTP", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleHTTP", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleHTTP", ToPort]
          Description: !FindInMap ["SecurityRules", "RuleHTTP", Description]
          CidrIp: !FindInMap ["SecurityRules", "RuleHTTPS", CidrIp]
        # Allow HTTPS
        - IpProtocol: !FindInMap ["SecurityRules", "RuleHTTPS", IpProtocol]
          FromPort: !FindInMap ["SecurityRules", "RuleHTTPS", FromPort]
          ToPort: !FindInMap ["SecurityRules", "RuleHTTPS", ToPort]
          Description: !FindInMap ["SecurityRules", "RuleHTTPS", Description]
          CidrIp: !FindInMap ["SecurityRules", "RuleHTTPS", CidrIp]
        # Allow all - for sqs testing
        - IpProtocol: tcp
          FromPort: 1024
          ToPort: -1
          Description: "Allow all traffic"
          CidrIp: !FindInMap ["SecurityRules", "RuleHTTPS", CidrIp]
      Tags:
        - Key: Author
          Value: !Ref TheAuthor
        - Key: Level
          Value: !Ref TagLevel
Outputs:
  DevSecurityGroup:
    Description: The security group id of the newly created dev security group
    Value:
      Ref: DevSecurityGroup
    Export:
      Name: !Sub "${VpcName}-dev-security-id"
  InfraSecurityGroup:
    Description: The security group id of the newly created infrastructure security group
    Value:
      Ref: InfraSecurityGroup
    Export:
      Name: !Sub "${VpcName}-infra-security-id"
  ElbWebSecurityGroup:
    Description: The security group id of the newly created ELB security group
    Value:
      Ref: ElbWebSecurityGroup
    Export:
      Name: !Sub "${VpcName}-elbweb-security-id"
  WebSecurityGroup:
    Description: The security group id of the newly created webfront security group
    Value:
      Ref: WebSecurityGroup
    Export:
      Name: !Sub "${VpcName}-web-security-id"
  RdsSecurityGroup1:
    Description: The security group id of the newly created RDS security group
    Value:
      Ref: RdsSecurityGroup1
    Export:
      Name: !Sub "${VpcName}-rds-security-1-id"
  CacheSecurityGroup1:
    Description: The security group id of the newly created ElastiCache security group
    Value:
      Ref: CacheSecurityGroup1
    Export:
      Name: !Sub "${VpcName}-cache-security-1-id"
  EfsSecurityGroup1:
    Description: The security group id of the newly created EFS security group
    Value:
      Ref: EfsSecurityGroup1
    Export:
      Name: !Sub "${VpcName}-efs-security-1-id"
